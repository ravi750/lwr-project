var __defProp = Object.defineProperty;
var __markAsModule = (target) => __defProp(target, "__esModule", {value: true});
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, {get: all[name], enumerable: true});
};

// packages/@lwrjs/server/src/common/abstract-request.ts
__markAsModule(exports);
__export(exports, {
  AbstractMiddlewareRequest: () => AbstractMiddlewareRequest
});
function parseForwardedHeader(forwarded) {
  if (!forwarded)
    return void 0;
  const couples = forwarded.toLocaleLowerCase().split(";");
  const map = couples.reduce((m, c) => {
    const [key, value] = c.trim().split("=");
    m[key] = value;
    return m;
  }, {});
  const proto = map.proto ? `${map.proto}://` : "";
  return map.host ? `${proto}${map.host}` : void 0;
}
var AbstractMiddlewareRequest = class {
  constructor(isSiteGenerationRequest) {
    this.isSiteGenerationRequest = isSiteGenerationRequest || false;
  }
  cookie(key) {
    const rawCookies = (this.headers.cookie?.split(";") || []).map((c) => c.trim());
    const rawCookie = rawCookies.find((c) => c.startsWith(`${key}=`));
    return rawCookie ? decodeURIComponent(rawCookie.replace(`${key}=`, "")) : void 0;
  }
  isSiteGeneration() {
    return this.isSiteGenerationRequest;
  }
  hasJsonParam() {
    return this.query.json !== void 0;
  }
  isJsonRequest() {
    const acceptHeader = this.headers?.accept || "";
    const hasJsonHeader = acceptHeader.indexOf("application/json") >= 0;
    return hasJsonHeader || this.query.json !== void 0;
  }
  validateJsonRequest() {
    const hasJsonQueryParam = this.hasJsonParam();
    const hasAcceptHeader = this.headers?.accept !== void 0;
    const hasJsonAcceptHeader = hasAcceptHeader && this.headers?.accept?.includes("application/json");
    return !hasAcceptHeader && !hasJsonQueryParam || hasJsonQueryParam !== hasAcceptHeader || hasJsonQueryParam === hasJsonAcceptHeader;
  }
  validateEnvironmentRequest(config) {
    const targetEnvironment = this.params.environment;
    const defaultEnvironment = config.environment.default;
    const supportedEnvironments = config.environment.supported || [];
    return !targetEnvironment || targetEnvironment === defaultEnvironment || supportedEnvironments?.includes(targetEnvironment);
  }
  validateApiVersion(config) {
    const apiVersion = this.params.apiVersion;
    return apiVersion === config.apiVersion;
  }
  getRuntimeContext(defaultRuntimeEnvironment) {
    const {
      format,
      apiVersion,
      basePath: basePathParam,
      compat,
      locale: localeParam,
      environment,
      bundleSpecifier
    } = this.params;
    const debug = this.query.debug !== void 0;
    const bundle = !!bundleSpecifier;
    const runtimeEnvironment = {
      ...defaultRuntimeEnvironment,
      format: format || defaultRuntimeEnvironment.format,
      compat: compat || defaultRuntimeEnvironment.compat,
      debug: debug || defaultRuntimeEnvironment.debug,
      apiVersion: apiVersion || defaultRuntimeEnvironment.apiVersion,
      bundle: bundle || defaultRuntimeEnvironment.bundle,
      basePath: this.basePath || basePathParam || defaultRuntimeEnvironment.basePath
    };
    let host = parseForwardedHeader(this.headers?.forwarded) || this.headers?.host || void 0;
    if (host && !host.startsWith("http")) {
      host = `${this.protocol}://${host}`;
    }
    const basePath = runtimeEnvironment.basePath;
    const defaultLocale = runtimeEnvironment.i18n.defaultLocale;
    const locale = localeParam || this.locale || defaultLocale;
    const uiBasePath = runtimeEnvironment.i18n.uriPattern === "path-prefix" && defaultLocale !== locale ? `${basePath}/${locale}` : `${basePath}`;
    const assetBasePath = `${runtimeEnvironment.basePath}${runtimeEnvironment.defaultAssetPath}`;
    const runtimeParams = {
      basePath,
      locale,
      assetBasePath,
      uiBasePath,
      environment,
      host
    };
    return {
      runtimeEnvironment,
      runtimeParams
    };
  }
};
