import { logger } from '@lwrjs/diagnostics';
import { explodeSpecifier, getSpecifier, getFeatureFlags } from '@lwrjs/shared-utils';
import path from 'path';
import fs from 'fs-extra';
import { getLocalizedBundle, resolveStaticBundleVersion } from '../utils/static-utils.js';
const LWR_SSR_BUNDLE_PREFIX = '@lwrjs/lwc-ssr/';
export default class StaticBundleProvider {
    constructor(_config, context) {
        this.name = 'static-bundle-provider';
        if (!context.siteMetadata) {
            throw new Error(`[${this.name}] Site metadata was not found`);
        }
        this.siteBundles = context.siteMetadata.getSiteBundles();
        this.debugSiteBundles = context.siteMetadata.getDebugSiteBundles();
        this.siteRootDir = context.siteMetadata.getSiteRootDir();
        this.bundleConfig = context.config.bundleConfig;
        this.i18n = context.config.i18n;
    }
    async bundle(moduleId, runtimeEnvironment, runtimeParams) {
        const { specifier, name, namespace, version } = moduleId;
        const { debug, i18n: { defaultLocale }, } = runtimeEnvironment;
        const localeId = (runtimeParams?.locale || defaultLocale);
        const siteBundles = debug && this.debugSiteBundles ? this.debugSiteBundles : this.siteBundles;
        const metadata = await getLocalizedBundle(specifier, siteBundles, localeId, this.i18n);
        if (!metadata) {
            // ignore ssr module requests
            if (!specifier.startsWith(LWR_SSR_BUNDLE_PREFIX)) {
                logger.warn({
                    label: `${this.name}`,
                    message: `did not find requested specifier ${specifier}`,
                });
            }
            return undefined;
        }
        // Have to make the bundle code available for SSR
        const bundlePath = path.join(this.siteRootDir, metadata.path);
        // workaround: debug bundles don't exist for SSR in this scenario since it's never actually used
        const skipDebugModeCode = debug && getFeatureFlags().SSR_STATIC_BUNDLES;
        const code = skipDebugModeCode
            ? 'throw new Error("Unexpected code reference");'
            : (await fs.readFile(bundlePath)).toString('utf-8');
        const imports = metadata.imports.map((specifier) => {
            const importModule = explodeSpecifier(specifier);
            if (!importModule.version) {
                // Get version from metadata for un-versioned imports
                importModule.version = resolveStaticBundleVersion(this.siteBundles.bundles[specifier]?.version);
            }
            return importModule;
        });
        const dynamicImports = metadata.dynamicImports?.map((specifier) => {
            const dynamicImportModule = explodeSpecifier(specifier);
            if (!dynamicImportModule.version) {
                // Get version from metadata for un-versioned imports
                dynamicImportModule.version = resolveStaticBundleVersion(this.siteBundles.bundles[specifier]?.version);
            }
            return dynamicImportModule;
        });
        const id = getSpecifier(moduleId);
        const exploded = explodeSpecifier(id);
        // Seem unlikely name was not in the moduleId but just incase set it form the exploded id
        const resolvedName = name || exploded.name;
        const resolvedNamespace = namespace || exploded.namespace;
        const resolvedVersion = resolveStaticBundleVersion(metadata.version, version);
        return {
            code,
            id: getSpecifier({
                specifier: specifier,
                version: resolvedVersion,
                name: resolvedName,
                namespace: resolvedNamespace,
            }),
            name: resolvedName,
            namespace: resolvedNamespace,
            version: resolvedVersion,
            specifier: specifier,
            config: this.bundleConfig,
            bundleRecord: {
                // TODO we need to solve include modules for fingerprints support
                includedModules: metadata.includedModules || [],
                imports,
                dynamicImports,
            },
            src: bundlePath,
        };
    }
}
//# sourceMappingURL=static-bundle-provider.js.map